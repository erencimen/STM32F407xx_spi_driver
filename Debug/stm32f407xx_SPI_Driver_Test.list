
stm32f407xx_SPI_Driver_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ff4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800119c  0800119c  0001119c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011bc  080011bc  000111c4  2**0
                  CONTENTS
  4 .ARM          00000000  080011bc  080011bc  000111c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011bc  080011c4  000111c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011bc  080011bc  000111bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011c0  080011c0  000111c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000111c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080011c4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080011c4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000111c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d67  00000000  00000000  000111ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000556  00000000  00000000  00012f55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c0  00000000  00000000  000134b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000188  00000000  00000000  00013670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000228c  00000000  00000000  000137f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000144e  00000000  00000000  00015a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009945  00000000  00000000  00016ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00020817  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006a0  00000000  00000000  00020894  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001184 	.word	0x08001184

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08001184 	.word	0x08001184

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <GPIO_PCLK_Control>:
 * @return			- None
 *
 * @Note			- None
 */
void GPIO_PCLK_Control(GPIO_TypeDef *pGPIOx,uint8_t EnorDi)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000204:	78fb      	ldrb	r3, [r7, #3]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d162      	bne.n	80002d0 <GPIO_PCLK_Control+0xd8>
	{
		if(pGPIOx == GPIOA)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a64      	ldr	r2, [pc, #400]	; (80003a0 <GPIO_PCLK_Control+0x1a8>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d106      	bne.n	8000220 <GPIO_PCLK_Control+0x28>
		{
			GPIOA_PCLK_EN();
 8000212:	4b64      	ldr	r3, [pc, #400]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000216:	4a63      	ldr	r2, [pc, #396]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}

	}
}
 800021e:	e0b9      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOB)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a61      	ldr	r2, [pc, #388]	; (80003a8 <GPIO_PCLK_Control+0x1b0>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d106      	bne.n	8000236 <GPIO_PCLK_Control+0x3e>
			GPIOB_PCLK_EN();
 8000228:	4b5e      	ldr	r3, [pc, #376]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022c:	4a5d      	ldr	r2, [pc, #372]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000234:	e0ae      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOC)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a5c      	ldr	r2, [pc, #368]	; (80003ac <GPIO_PCLK_Control+0x1b4>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d106      	bne.n	800024c <GPIO_PCLK_Control+0x54>
			GPIOC_PCLK_EN();
 800023e:	4b59      	ldr	r3, [pc, #356]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000242:	4a58      	ldr	r2, [pc, #352]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000244:	f043 0304 	orr.w	r3, r3, #4
 8000248:	6313      	str	r3, [r2, #48]	; 0x30
}
 800024a:	e0a3      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOD)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a58      	ldr	r2, [pc, #352]	; (80003b0 <GPIO_PCLK_Control+0x1b8>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d106      	bne.n	8000262 <GPIO_PCLK_Control+0x6a>
			GPIOD_PCLK_EN();
 8000254:	4b53      	ldr	r3, [pc, #332]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000258:	4a52      	ldr	r2, [pc, #328]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000260:	e098      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOE)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a53      	ldr	r2, [pc, #332]	; (80003b4 <GPIO_PCLK_Control+0x1bc>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_PCLK_Control+0x80>
			GPIOE_PCLK_EN();
 800026a:	4b4e      	ldr	r3, [pc, #312]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	4a4d      	ldr	r2, [pc, #308]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000270:	f043 0310 	orr.w	r3, r3, #16
 8000274:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000276:	e08d      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOF)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a4f      	ldr	r2, [pc, #316]	; (80003b8 <GPIO_PCLK_Control+0x1c0>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d106      	bne.n	800028e <GPIO_PCLK_Control+0x96>
			GPIOF_PCLK_EN();
 8000280:	4b48      	ldr	r3, [pc, #288]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000284:	4a47      	ldr	r2, [pc, #284]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800028c:	e082      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOG)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a4a      	ldr	r2, [pc, #296]	; (80003bc <GPIO_PCLK_Control+0x1c4>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d106      	bne.n	80002a4 <GPIO_PCLK_Control+0xac>
			GPIOG_PCLK_EN();
 8000296:	4b43      	ldr	r3, [pc, #268]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029a:	4a42      	ldr	r2, [pc, #264]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800029c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a2:	e077      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOH)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a46      	ldr	r2, [pc, #280]	; (80003c0 <GPIO_PCLK_Control+0x1c8>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PCLK_Control+0xc2>
			GPIOH_PCLK_EN();
 80002ac:	4b3d      	ldr	r3, [pc, #244]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a3c      	ldr	r2, [pc, #240]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b8:	e06c      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOI)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a41      	ldr	r2, [pc, #260]	; (80003c4 <GPIO_PCLK_Control+0x1cc>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d168      	bne.n	8000394 <GPIO_PCLK_Control+0x19c>
			GPIOI_PCLK_EN();
 80002c2:	4b38      	ldr	r3, [pc, #224]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c6:	4a37      	ldr	r2, [pc, #220]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ce:	e061      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		if(pGPIOx == GPIOA)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a33      	ldr	r2, [pc, #204]	; (80003a0 <GPIO_PCLK_Control+0x1a8>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PCLK_Control+0xee>
			GPIOA_PCLK_DI();
 80002d8:	4b32      	ldr	r3, [pc, #200]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002dc:	4a31      	ldr	r2, [pc, #196]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002de:	f023 0301 	bic.w	r3, r3, #1
 80002e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e4:	e056      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOB)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a2f      	ldr	r2, [pc, #188]	; (80003a8 <GPIO_PCLK_Control+0x1b0>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_PCLK_Control+0x104>
			GPIOB_PCLK_DI();
 80002ee:	4b2d      	ldr	r3, [pc, #180]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f2:	4a2c      	ldr	r2, [pc, #176]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 80002f4:	f023 0302 	bic.w	r3, r3, #2
 80002f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fa:	e04b      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOC)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <GPIO_PCLK_Control+0x1b4>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PCLK_Control+0x11a>
			GPIOC_PCLK_DI();
 8000304:	4b27      	ldr	r3, [pc, #156]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000308:	4a26      	ldr	r2, [pc, #152]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800030a:	f023 0304 	bic.w	r3, r3, #4
 800030e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000310:	e040      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOD)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a26      	ldr	r2, [pc, #152]	; (80003b0 <GPIO_PCLK_Control+0x1b8>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PCLK_Control+0x130>
			GPIOD_PCLK_DI();
 800031a:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031e:	4a21      	ldr	r2, [pc, #132]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000320:	f023 0308 	bic.w	r3, r3, #8
 8000324:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000326:	e035      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOE)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a22      	ldr	r2, [pc, #136]	; (80003b4 <GPIO_PCLK_Control+0x1bc>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PCLK_Control+0x146>
			GPIOE_PCLK_DI();
 8000330:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a1b      	ldr	r2, [pc, #108]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000336:	f023 0310 	bic.w	r3, r3, #16
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033c:	e02a      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOF)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a1d      	ldr	r2, [pc, #116]	; (80003b8 <GPIO_PCLK_Control+0x1c0>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PCLK_Control+0x15c>
			GPIOF_PCLK_DI();
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800034c:	f023 0320 	bic.w	r3, r3, #32
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000352:	e01f      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOG)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a19      	ldr	r2, [pc, #100]	; (80003bc <GPIO_PCLK_Control+0x1c4>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PCLK_Control+0x172>
			GPIOG_PCLK_DI();
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000366:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000368:	e014      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOH)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <GPIO_PCLK_Control+0x1c8>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PCLK_Control+0x188>
			GPIOH_PCLK_DI();
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 8000378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800037c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037e:	e009      	b.n	8000394 <GPIO_PCLK_Control+0x19c>
		else if(pGPIOx ==GPIOI)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a10      	ldr	r2, [pc, #64]	; (80003c4 <GPIO_PCLK_Control+0x1cc>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d105      	bne.n	8000394 <GPIO_PCLK_Control+0x19c>
			GPIOI_PCLK_DI();
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038c:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <GPIO_PCLK_Control+0x1ac>)
 800038e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000392:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40020000 	.word	0x40020000
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40020400 	.word	0x40020400
 80003ac:	40020800 	.word	0x40020800
 80003b0:	40020c00 	.word	0x40020c00
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40021400 	.word	0x40021400
 80003bc:	40021800 	.word	0x40021800
 80003c0:	40021c00 	.word	0x40021c00
 80003c4:	40022000 	.word	0x40022000

080003c8 <GPIO_Init>:
 * @return			- None
 *
 * @Note			- None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]

	uint32_t temp =0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]

	//Enable the peripheral clock

	GPIO_PCLK_Control(pGPIOHandle->pGPIOx, ENABLE);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2101      	movs	r1, #1
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff ff0c 	bl	80001f8 <GPIO_PCLK_Control>

	//GPIO pin mode configuration
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	795b      	ldrb	r3, [r3, #5]
 80003e4:	2b03      	cmp	r3, #3
 80003e6:	d821      	bhi.n	800042c <GPIO_Init+0x64>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	795b      	ldrb	r3, [r3, #5]
 80003ec:	461a      	mov	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	791b      	ldrb	r3, [r3, #4]
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	fa02 f303 	lsl.w	r3, r2, r3
 80003f8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );	//Clearing
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	4619      	mov	r1, r3
 8000406:	2303      	movs	r3, #3
 8000408:	408b      	lsls	r3, r1
 800040a:	43db      	mvns	r3, r3
 800040c:	4619      	mov	r1, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	400a      	ands	r2, r1
 8000414:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;		//Setting
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	6819      	ldr	r1, [r3, #0]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	697a      	ldr	r2, [r7, #20]
 8000422:	430a      	orrs	r2, r1
 8000424:	601a      	str	r2, [r3, #0]
		temp=0;
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	e0c3      	b.n	80005b4 <GPIO_Init+0x1ec>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	795b      	ldrb	r3, [r3, #5]
 8000430:	2b04      	cmp	r3, #4
 8000432:	d117      	bne.n	8000464 <GPIO_Init+0x9c>
		{
			//Set corresponding FTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000434:	4b47      	ldr	r3, [pc, #284]	; (8000554 <GPIO_Init+0x18c>)
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	7912      	ldrb	r2, [r2, #4]
 800043c:	4611      	mov	r1, r2
 800043e:	2201      	movs	r2, #1
 8000440:	408a      	lsls	r2, r1
 8000442:	4611      	mov	r1, r2
 8000444:	4a43      	ldr	r2, [pc, #268]	; (8000554 <GPIO_Init+0x18c>)
 8000446:	430b      	orrs	r3, r1
 8000448:	60d3      	str	r3, [r2, #12]
			//Clear corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800044a:	4b42      	ldr	r3, [pc, #264]	; (8000554 <GPIO_Init+0x18c>)
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	7912      	ldrb	r2, [r2, #4]
 8000452:	4611      	mov	r1, r2
 8000454:	2201      	movs	r2, #1
 8000456:	408a      	lsls	r2, r1
 8000458:	43d2      	mvns	r2, r2
 800045a:	4611      	mov	r1, r2
 800045c:	4a3d      	ldr	r2, [pc, #244]	; (8000554 <GPIO_Init+0x18c>)
 800045e:	400b      	ands	r3, r1
 8000460:	6093      	str	r3, [r2, #8]
 8000462:	e035      	b.n	80004d0 <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	795b      	ldrb	r3, [r3, #5]
 8000468:	2b05      	cmp	r3, #5
 800046a:	d117      	bne.n	800049c <GPIO_Init+0xd4>
		{
			//Set corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800046c:	4b39      	ldr	r3, [pc, #228]	; (8000554 <GPIO_Init+0x18c>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	7912      	ldrb	r2, [r2, #4]
 8000474:	4611      	mov	r1, r2
 8000476:	2201      	movs	r2, #1
 8000478:	408a      	lsls	r2, r1
 800047a:	4611      	mov	r1, r2
 800047c:	4a35      	ldr	r2, [pc, #212]	; (8000554 <GPIO_Init+0x18c>)
 800047e:	430b      	orrs	r3, r1
 8000480:	6093      	str	r3, [r2, #8]
			//Clear corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000482:	4b34      	ldr	r3, [pc, #208]	; (8000554 <GPIO_Init+0x18c>)
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	7912      	ldrb	r2, [r2, #4]
 800048a:	4611      	mov	r1, r2
 800048c:	2201      	movs	r2, #1
 800048e:	408a      	lsls	r2, r1
 8000490:	43d2      	mvns	r2, r2
 8000492:	4611      	mov	r1, r2
 8000494:	4a2f      	ldr	r2, [pc, #188]	; (8000554 <GPIO_Init+0x18c>)
 8000496:	400b      	ands	r3, r1
 8000498:	60d3      	str	r3, [r2, #12]
 800049a:	e019      	b.n	80004d0 <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	795b      	ldrb	r3, [r3, #5]
 80004a0:	2b06      	cmp	r3, #6
 80004a2:	d115      	bne.n	80004d0 <GPIO_Init+0x108>
		{
			//Set corresponding FTSR and RTSR bits
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a4:	4b2b      	ldr	r3, [pc, #172]	; (8000554 <GPIO_Init+0x18c>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	7912      	ldrb	r2, [r2, #4]
 80004ac:	4611      	mov	r1, r2
 80004ae:	2201      	movs	r2, #1
 80004b0:	408a      	lsls	r2, r1
 80004b2:	4611      	mov	r1, r2
 80004b4:	4a27      	ldr	r2, [pc, #156]	; (8000554 <GPIO_Init+0x18c>)
 80004b6:	430b      	orrs	r3, r1
 80004b8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ba:	4b26      	ldr	r3, [pc, #152]	; (8000554 <GPIO_Init+0x18c>)
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	7912      	ldrb	r2, [r2, #4]
 80004c2:	4611      	mov	r1, r2
 80004c4:	2201      	movs	r2, #1
 80004c6:	408a      	lsls	r2, r1
 80004c8:	4611      	mov	r1, r2
 80004ca:	4a22      	ldr	r2, [pc, #136]	; (8000554 <GPIO_Init+0x18c>)
 80004cc:	430b      	orrs	r3, r1
 80004ce:	6093      	str	r3, [r2, #8]
		}

		uint32_t temp1,temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	791b      	ldrb	r3, [r3, #4]
 80004d4:	089b      	lsrs	r3, r3, #2
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	613b      	str	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	f003 0303 	and.w	r3, r3, #3
 80004e2:	60fb      	str	r3, [r7, #12]

		//Get port code for given GPIOx
		uint8_t PORTCODE =GPIO_BASE_TO_PORTCODE(pGPIOHandle->pGPIOx);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a1b      	ldr	r2, [pc, #108]	; (8000558 <GPIO_Init+0x190>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d044      	beq.n	8000578 <GPIO_Init+0x1b0>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a1a      	ldr	r2, [pc, #104]	; (800055c <GPIO_Init+0x194>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d02b      	beq.n	8000550 <GPIO_Init+0x188>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a18      	ldr	r2, [pc, #96]	; (8000560 <GPIO_Init+0x198>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d024      	beq.n	800054c <GPIO_Init+0x184>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a17      	ldr	r2, [pc, #92]	; (8000564 <GPIO_Init+0x19c>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d01d      	beq.n	8000548 <GPIO_Init+0x180>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a15      	ldr	r2, [pc, #84]	; (8000568 <GPIO_Init+0x1a0>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d016      	beq.n	8000544 <GPIO_Init+0x17c>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a14      	ldr	r2, [pc, #80]	; (800056c <GPIO_Init+0x1a4>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d00f      	beq.n	8000540 <GPIO_Init+0x178>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a12      	ldr	r2, [pc, #72]	; (8000570 <GPIO_Init+0x1a8>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d008      	beq.n	800053c <GPIO_Init+0x174>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a11      	ldr	r2, [pc, #68]	; (8000574 <GPIO_Init+0x1ac>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d101      	bne.n	8000538 <GPIO_Init+0x170>
 8000534:	2307      	movs	r3, #7
 8000536:	e020      	b.n	800057a <GPIO_Init+0x1b2>
 8000538:	2300      	movs	r3, #0
 800053a:	e01e      	b.n	800057a <GPIO_Init+0x1b2>
 800053c:	2306      	movs	r3, #6
 800053e:	e01c      	b.n	800057a <GPIO_Init+0x1b2>
 8000540:	2305      	movs	r3, #5
 8000542:	e01a      	b.n	800057a <GPIO_Init+0x1b2>
 8000544:	2304      	movs	r3, #4
 8000546:	e018      	b.n	800057a <GPIO_Init+0x1b2>
 8000548:	2303      	movs	r3, #3
 800054a:	e016      	b.n	800057a <GPIO_Init+0x1b2>
 800054c:	2302      	movs	r3, #2
 800054e:	e014      	b.n	800057a <GPIO_Init+0x1b2>
 8000550:	2301      	movs	r3, #1
 8000552:	e012      	b.n	800057a <GPIO_Init+0x1b2>
 8000554:	40013c00 	.word	0x40013c00
 8000558:	40020000 	.word	0x40020000
 800055c:	40020400 	.word	0x40020400
 8000560:	40020800 	.word	0x40020800
 8000564:	40020c00 	.word	0x40020c00
 8000568:	40021000 	.word	0x40021000
 800056c:	40021400 	.word	0x40021400
 8000570:	40021800 	.word	0x40021800
 8000574:	40022000 	.word	0x40022000
 8000578:	2300      	movs	r3, #0
 800057a:	72fb      	strb	r3, [r7, #11]

		//Enable the Clock for SYSCFG
		SYSCFG_PCLK_EN();
 800057c:	4b5f      	ldr	r3, [pc, #380]	; (80006fc <GPIO_Init+0x334>)
 800057e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000580:	4a5e      	ldr	r2, [pc, #376]	; (80006fc <GPIO_Init+0x334>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6453      	str	r3, [r2, #68]	; 0x44

		//Set source input for the EXTIx
		SYSCFG->EXTICR[temp1] = PORTCODE << (temp2 * 4);
 8000588:	7afa      	ldrb	r2, [r7, #11]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	4a5b      	ldr	r2, [pc, #364]	; (8000700 <GPIO_Init+0x338>)
 8000594:	4619      	mov	r1, r3
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	3302      	adds	r3, #2
 800059a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//Enable the EXTI Interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800059e:	4b59      	ldr	r3, [pc, #356]	; (8000704 <GPIO_Init+0x33c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	7912      	ldrb	r2, [r2, #4]
 80005a6:	4611      	mov	r1, r2
 80005a8:	2201      	movs	r2, #1
 80005aa:	408a      	lsls	r2, r1
 80005ac:	4611      	mov	r1, r2
 80005ae:	4a55      	ldr	r2, [pc, #340]	; (8000704 <GPIO_Init+0x33c>)
 80005b0:	430b      	orrs	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]


	}

	//GPIO pin output speed configuration
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	799b      	ldrb	r3, [r3, #6]
 80005b8:	461a      	mov	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );	//Clearing
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	4619      	mov	r1, r3
 80005d2:	2303      	movs	r3, #3
 80005d4:	408b      	lsls	r3, r1
 80005d6:	43db      	mvns	r3, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	400a      	ands	r2, r1
 80005e0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	//Setting
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	6899      	ldr	r1, [r3, #8]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	697a      	ldr	r2, [r7, #20]
 80005ee:	430a      	orrs	r2, r1
 80005f0:	609a      	str	r2, [r3, #8]
	temp =0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]

	//GPIO pull-up pull-down configuration
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PuPdControl <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	79db      	ldrb	r3, [r3, #7]
 80005fa:	461a      	mov	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );	//Clearing
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	68da      	ldr	r2, [r3, #12]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	4619      	mov	r1, r3
 8000614:	2303      	movs	r3, #3
 8000616:	408b      	lsls	r3, r1
 8000618:	43db      	mvns	r3, r3
 800061a:	4619      	mov	r1, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	400a      	ands	r2, r1
 8000622:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;		//Setting
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	68d9      	ldr	r1, [r3, #12]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	697a      	ldr	r2, [r7, #20]
 8000630:	430a      	orrs	r2, r1
 8000632:	60da      	str	r2, [r3, #12]
	temp =0;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]

	//GPIO output type configuration
	//Output Type Mode register set only when GPIO Mode is out
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	795b      	ldrb	r3, [r3, #5]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d11f      	bne.n	8000680 <GPIO_Init+0x2b8>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	7a1b      	ldrb	r3, [r3, #8]
 8000644:	461a      	mov	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	fa02 f303 	lsl.w	r3, r2, r3
 800064e:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );	//Clearing
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	685a      	ldr	r2, [r3, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	791b      	ldrb	r3, [r3, #4]
 800065a:	4619      	mov	r1, r3
 800065c:	2301      	movs	r3, #1
 800065e:	408b      	lsls	r3, r1
 8000660:	43db      	mvns	r3, r3
 8000662:	4619      	mov	r1, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	400a      	ands	r2, r1
 800066a:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;	//Setting
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	6859      	ldr	r1, [r3, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	697a      	ldr	r2, [r7, #20]
 8000678:	430a      	orrs	r2, r1
 800067a:	605a      	str	r2, [r3, #4]
		temp =0;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
	}

	//GPIO alternate function mode configuration
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_AF)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	795b      	ldrb	r3, [r3, #5]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d134      	bne.n	80006f2 <GPIO_Init+0x32a>
	{
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	08db      	lsrs	r3, r3, #3
 800068e:	72bb      	strb	r3, [r7, #10]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	f003 0307 	and.w	r3, r3, #7
 8000698:	727b      	strb	r3, [r7, #9]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	7a5b      	ldrb	r3, [r3, #9]
 800069e:	461a      	mov	r2, r3
 80006a0:	7a7b      	ldrb	r3, [r7, #9]
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~((0xF) << 4*temp2);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	7aba      	ldrb	r2, [r7, #10]
 80006b0:	3208      	adds	r2, #8
 80006b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006b6:	7a7b      	ldrb	r3, [r7, #9]
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	220f      	movs	r2, #15
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	43db      	mvns	r3, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	7aba      	ldrb	r2, [r7, #10]
 80006ca:	4001      	ands	r1, r0
 80006cc:	3208      	adds	r2, #8
 80006ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= temp;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	7aba      	ldrb	r2, [r7, #10]
 80006d8:	3208      	adds	r2, #8
 80006da:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	7aba      	ldrb	r2, [r7, #10]
 80006e4:	6979      	ldr	r1, [r7, #20]
 80006e6:	4301      	orrs	r1, r0
 80006e8:	3208      	adds	r2, #8
 80006ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp =0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
	}

}
 80006f2:	bf00      	nop
 80006f4:	3718      	adds	r7, #24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40013800 	.word	0x40013800
 8000704:	40013c00 	.word	0x40013c00

08000708 <GPIO_Read_Pin>:
 * @return			- The input port pin value
 *
 * @Note			- None
 */
uint8_t GPIO_Read_Pin(GPIO_TypeDef *pGPIOx,uint8_t GPIO_PinNumber)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) (pGPIOx->IDR >> GPIO_PinNumber) & (0x00000001);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	691a      	ldr	r2, [r3, #16]
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	fa22 f303 	lsr.w	r3, r2, r3
 800071e:	b2db      	uxtb	r3, r3
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	73fb      	strb	r3, [r7, #15]

	return value;
 8000726:	7bfb      	ldrb	r3, [r7, #15]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <GPIO_Write_Pin>:
 * @return			- None
 *
 * @Note			- None
 */
void GPIO_Write_Pin(GPIO_TypeDef *pGPIOx,uint8_t GPIO_PinNumber,uint8_t PinState)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
 800073a:	460b      	mov	r3, r1
 800073c:	70fb      	strb	r3, [r7, #3]
 800073e:	4613      	mov	r3, r2
 8000740:	70bb      	strb	r3, [r7, #2]
	if(PinState == GPIO_PIN_SET)
 8000742:	78bb      	ldrb	r3, [r7, #2]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d109      	bne.n	800075c <GPIO_Write_Pin+0x2a>
	{
		pGPIOx->ODR |= (0x1 << GPIO_PinNumber);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	78fa      	ldrb	r2, [r7, #3]
 800074e:	2101      	movs	r1, #1
 8000750:	fa01 f202 	lsl.w	r2, r1, r2
 8000754:	431a      	orrs	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	615a      	str	r2, [r3, #20]
	}
	else
	{
		pGPIOx->ODR &= ~(0x1 << GPIO_PinNumber);
	}
}
 800075a:	e009      	b.n	8000770 <GPIO_Write_Pin+0x3e>
		pGPIOx->ODR &= ~(0x1 << GPIO_PinNumber);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	695b      	ldr	r3, [r3, #20]
 8000760:	78fa      	ldrb	r2, [r7, #3]
 8000762:	2101      	movs	r1, #1
 8000764:	fa01 f202 	lsl.w	r2, r1, r2
 8000768:	43d2      	mvns	r2, r2
 800076a:	401a      	ands	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	615a      	str	r2, [r3, #20]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <GPIO_Toggle_Pin>:
 * @return			- None
 *
 * @Note			- None
 */
void GPIO_Toggle_Pin(GPIO_TypeDef *pGPIOx,uint8_t GPIO_PinNumber)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	460b      	mov	r3, r1
 8000784:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (0x1 << GPIO_PinNumber);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	78fa      	ldrb	r2, [r7, #3]
 800078c:	2101      	movs	r1, #1
 800078e:	fa01 f202 	lsl.w	r2, r1, r2
 8000792:	405a      	eors	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	615a      	str	r2, [r3, #20]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
	...

080007a4 <GPIO_IRQITConfig>:
 * @return			- None
 *
 * @Note			- None
 */
void GPIO_IRQITConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	460a      	mov	r2, r1
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	4613      	mov	r3, r2
 80007b2:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 80007b4:	79bb      	ldrb	r3, [r7, #6]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d133      	bne.n	8000822 <GPIO_IRQITConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2b1f      	cmp	r3, #31
 80007be:	d80a      	bhi.n	80007d6 <GPIO_IRQITConfig+0x32>
		{
			*NVIC_ISER0 |= (1 << IRQNumber);
 80007c0:	4b34      	ldr	r3, [pc, #208]	; (8000894 <GPIO_IRQITConfig+0xf0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	79fa      	ldrb	r2, [r7, #7]
 80007c6:	2101      	movs	r1, #1
 80007c8:	fa01 f202 	lsl.w	r2, r1, r2
 80007cc:	4611      	mov	r1, r2
 80007ce:	4a31      	ldr	r2, [pc, #196]	; (8000894 <GPIO_IRQITConfig+0xf0>)
 80007d0:	430b      	orrs	r3, r1
 80007d2:	6013      	str	r3, [r2, #0]
		else if(IRQNumber>63 && IRQNumber <96)
		{
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 80007d4:	e059      	b.n	800088a <GPIO_IRQITConfig+0xe6>
		else if(IRQNumber>31 && IRQNumber <= 63)
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b1f      	cmp	r3, #31
 80007da:	d90f      	bls.n	80007fc <GPIO_IRQITConfig+0x58>
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b3f      	cmp	r3, #63	; 0x3f
 80007e0:	d80c      	bhi.n	80007fc <GPIO_IRQITConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <GPIO_IRQITConfig+0xf4>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	79fa      	ldrb	r2, [r7, #7]
 80007e8:	f002 021f 	and.w	r2, r2, #31
 80007ec:	2101      	movs	r1, #1
 80007ee:	fa01 f202 	lsl.w	r2, r1, r2
 80007f2:	4611      	mov	r1, r2
 80007f4:	4a28      	ldr	r2, [pc, #160]	; (8000898 <GPIO_IRQITConfig+0xf4>)
 80007f6:	430b      	orrs	r3, r1
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	e046      	b.n	800088a <GPIO_IRQITConfig+0xe6>
		else if(IRQNumber>63 && IRQNumber <96)
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000800:	d943      	bls.n	800088a <GPIO_IRQITConfig+0xe6>
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b5f      	cmp	r3, #95	; 0x5f
 8000806:	d840      	bhi.n	800088a <GPIO_IRQITConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000808:	4b24      	ldr	r3, [pc, #144]	; (800089c <GPIO_IRQITConfig+0xf8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	79fa      	ldrb	r2, [r7, #7]
 800080e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000812:	2101      	movs	r1, #1
 8000814:	fa01 f202 	lsl.w	r2, r1, r2
 8000818:	4611      	mov	r1, r2
 800081a:	4a20      	ldr	r2, [pc, #128]	; (800089c <GPIO_IRQITConfig+0xf8>)
 800081c:	430b      	orrs	r3, r1
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	e033      	b.n	800088a <GPIO_IRQITConfig+0xe6>
		if(IRQNumber <= 31)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b1f      	cmp	r3, #31
 8000826:	d80a      	bhi.n	800083e <GPIO_IRQITConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <GPIO_IRQITConfig+0xfc>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	2101      	movs	r1, #1
 8000830:	fa01 f202 	lsl.w	r2, r1, r2
 8000834:	4611      	mov	r1, r2
 8000836:	4a1a      	ldr	r2, [pc, #104]	; (80008a0 <GPIO_IRQITConfig+0xfc>)
 8000838:	430b      	orrs	r3, r1
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	e025      	b.n	800088a <GPIO_IRQITConfig+0xe6>
		else if(IRQNumber>31 && IRQNumber <= 63)
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b1f      	cmp	r3, #31
 8000842:	d90f      	bls.n	8000864 <GPIO_IRQITConfig+0xc0>
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b3f      	cmp	r3, #63	; 0x3f
 8000848:	d80c      	bhi.n	8000864 <GPIO_IRQITConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <GPIO_IRQITConfig+0x100>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	79fa      	ldrb	r2, [r7, #7]
 8000850:	f002 021f 	and.w	r2, r2, #31
 8000854:	2101      	movs	r1, #1
 8000856:	fa01 f202 	lsl.w	r2, r1, r2
 800085a:	4611      	mov	r1, r2
 800085c:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <GPIO_IRQITConfig+0x100>)
 800085e:	430b      	orrs	r3, r1
 8000860:	6013      	str	r3, [r2, #0]
 8000862:	e012      	b.n	800088a <GPIO_IRQITConfig+0xe6>
		else if(IRQNumber>63 && IRQNumber <96)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2b3f      	cmp	r3, #63	; 0x3f
 8000868:	d90f      	bls.n	800088a <GPIO_IRQITConfig+0xe6>
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b5f      	cmp	r3, #95	; 0x5f
 800086e:	d80c      	bhi.n	800088a <GPIO_IRQITConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <GPIO_IRQITConfig+0x104>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800087a:	2101      	movs	r1, #1
 800087c:	fa01 f202 	lsl.w	r2, r1, r2
 8000880:	4611      	mov	r1, r2
 8000882:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <GPIO_IRQITConfig+0x104>)
 8000884:	430b      	orrs	r3, r1
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	e7ff      	b.n	800088a <GPIO_IRQITConfig+0xe6>
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000e104 	.word	0xe000e104
 800089c:	e000e108 	.word	0xe000e108
 80008a0:	e000e180 	.word	0xe000e180
 80008a4:	e000e184 	.word	0xe000e184
 80008a8:	e000e188 	.word	0xe000e188

080008ac <GPIO_IRQPriorityConfig>:
 *
 * @Note			- None
 */

void GPIO_IRQPriorityConfig(uint8_t IRQNumber ,uint8_t IRQPriority)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	460a      	mov	r2, r1
 80008b6:	71fb      	strb	r3, [r7, #7]
 80008b8:	4613      	mov	r3, r2
 80008ba:	71bb      	strb	r3, [r7, #6]
	uint8_t iprx = IRQNumber / 4;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	089b      	lsrs	r3, r3, #2
 80008c0:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	f003 0303 	and.w	r3, r3, #3
 80008c8:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	3304      	adds	r3, #4
 80008d2:	737b      	strb	r3, [r7, #13]

	*(NVIC_IPR0_BASE + iprx) = (IRQPriority << shift_amount);
 80008d4:	79ba      	ldrb	r2, [r7, #6]
 80008d6:	7b7b      	ldrb	r3, [r7, #13]
 80008d8:	409a      	lsls	r2, r3
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80008e2:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80008e6:	601a      	str	r2, [r3, #0]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
	...

080008f4 <GPIO_IRQ_Handling>:
 * @return			- None
 *
 * @Note			- None
 */
void GPIO_IRQ_Handling(uint8_t GPIO_PinNumber)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	//Clear the EXTI PR Register corresponding to the pin number
	if(EXTI->PR & (1 << GPIO_PinNumber))
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <GPIO_IRQ_Handling+0x3c>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	79fa      	ldrb	r2, [r7, #7]
 8000904:	2101      	movs	r1, #1
 8000906:	fa01 f202 	lsl.w	r2, r1, r2
 800090a:	4013      	ands	r3, r2
 800090c:	2b00      	cmp	r3, #0
 800090e:	d009      	beq.n	8000924 <GPIO_IRQ_Handling+0x30>
	{
		EXTI->PR |= (1 << GPIO_PinNumber); //This bit is cleared by programming it to ‘1’
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <GPIO_IRQ_Handling+0x3c>)
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	79fa      	ldrb	r2, [r7, #7]
 8000916:	2101      	movs	r1, #1
 8000918:	fa01 f202 	lsl.w	r2, r1, r2
 800091c:	4611      	mov	r1, r2
 800091e:	4a04      	ldr	r2, [pc, #16]	; (8000930 <GPIO_IRQ_Handling+0x3c>)
 8000920:	430b      	orrs	r3, r1
 8000922:	6153      	str	r3, [r2, #20]
	}
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40013c00 	.word	0x40013c00

08000934 <SPI_PCLK_Control>:
 * @return			- None
 *
 * @Note			- None
 */
void SPI_PCLK_Control(SPI_TypeDef *pSPIx,uint8_t EnorDi)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000940:	78fb      	ldrb	r3, [r7, #3]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d120      	bne.n	8000988 <SPI_PCLK_Control+0x54>
	{
		if(pSPIx == SPI1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a22      	ldr	r2, [pc, #136]	; (80009d4 <SPI_PCLK_Control+0xa0>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d106      	bne.n	800095c <SPI_PCLK_Control+0x28>
		{
			SPI1_PCLK_EN();
 800094e:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <SPI_PCLK_Control+0xa4>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a21      	ldr	r2, [pc, #132]	; (80009d8 <SPI_PCLK_Control+0xa4>)
 8000954:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
	}
}
 800095a:	e035      	b.n	80009c8 <SPI_PCLK_Control+0x94>
		else if(pSPIx == SPI2)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a1f      	ldr	r2, [pc, #124]	; (80009dc <SPI_PCLK_Control+0xa8>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d106      	bne.n	8000972 <SPI_PCLK_Control+0x3e>
			SPI2_PCLK_EN();
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <SPI_PCLK_Control+0xa4>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a1b      	ldr	r2, [pc, #108]	; (80009d8 <SPI_PCLK_Control+0xa4>)
 800096a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000970:	e02a      	b.n	80009c8 <SPI_PCLK_Control+0x94>
		else if(pSPIx == SPI3)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a1a      	ldr	r2, [pc, #104]	; (80009e0 <SPI_PCLK_Control+0xac>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d126      	bne.n	80009c8 <SPI_PCLK_Control+0x94>
			SPI3_PCLK_EN();
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <SPI_PCLK_Control+0xa4>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <SPI_PCLK_Control+0xa4>)
 8000980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000986:	e01f      	b.n	80009c8 <SPI_PCLK_Control+0x94>
		if(pSPIx == SPI1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <SPI_PCLK_Control+0xa0>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d106      	bne.n	800099e <SPI_PCLK_Control+0x6a>
			SPI1_PCLK_DI();
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <SPI_PCLK_Control+0xa4>)
 8000992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000994:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <SPI_PCLK_Control+0xa4>)
 8000996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800099a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800099c:	e014      	b.n	80009c8 <SPI_PCLK_Control+0x94>
		else if(pSPIx == SPI2)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <SPI_PCLK_Control+0xa8>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d106      	bne.n	80009b4 <SPI_PCLK_Control+0x80>
			SPI2_PCLK_DI();
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <SPI_PCLK_Control+0xa4>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a0b      	ldr	r2, [pc, #44]	; (80009d8 <SPI_PCLK_Control+0xa4>)
 80009ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009b2:	e009      	b.n	80009c8 <SPI_PCLK_Control+0x94>
		else if(pSPIx == SPI3)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <SPI_PCLK_Control+0xac>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d105      	bne.n	80009c8 <SPI_PCLK_Control+0x94>
			SPI3_PCLK_DI();
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <SPI_PCLK_Control+0xa4>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <SPI_PCLK_Control+0xa4>)
 80009c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009c6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40013000 	.word	0x40013000
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40003800 	.word	0x40003800
 80009e0:	40003c00 	.word	0x40003c00

080009e4 <SPI_Init>:
 * @return			- None
 *
 * @Note			- None
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]

	//Enable the peripheral clock

	SPI_PCLK_Control(pSPIHandle->pSPIx, ENABLE);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2101      	movs	r1, #1
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff9c 	bl	8000934 <SPI_PCLK_Control>

	//SPI Mode configuration

	temp |= pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]

	//SPI BUS configuration
	if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CNFG_FD)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	795b      	ldrb	r3, [r3, #5]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d104      	bne.n	8000a1c <SPI_Init+0x38>
	{
		temp &= ~(0x1 << SPI_CR1_BIDIMODE);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	e014      	b.n	8000a46 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CNFG_HD)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	795b      	ldrb	r3, [r3, #5]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d104      	bne.n	8000a2e <SPI_Init+0x4a>
	{
		temp |= (0x1 << SPI_CR1_BIDIMODE);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	e00b      	b.n	8000a46 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CNFG_SIMPLEX_RXONLY)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	795b      	ldrb	r3, [r3, #5]
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	d107      	bne.n	8000a46 <SPI_Init+0x62>
	{
		temp &= ~(0x1 << SPI_CR1_BIDIMODE);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a3c:	60fb      	str	r3, [r7, #12]
		temp |= (0x1 << SPI_CR1_RXONLY);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a44:	60fb      	str	r3, [r7, #12]
	}

	//SPI Serial Clock Speed Configuration

	temp |= (pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	799b      	ldrb	r3, [r3, #6]
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]

	//SPI Data Frame Format Configuration

	temp |= (pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	79db      	ldrb	r3, [r3, #7]
 8000a58:	02db      	lsls	r3, r3, #11
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]

	//SPI Serial Clock Polarity configuration

	temp |= (pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	7a1b      	ldrb	r3, [r3, #8]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	461a      	mov	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]

	//SPI Serial Clock Phase configuration

	temp |= (pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	7a5b      	ldrb	r3, [r3, #9]
 8000a74:	461a      	mov	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]

	//SPI Software Slave Select Management configuration

	temp |= (pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	7a9b      	ldrb	r3, [r3, #10]
 8000a80:	025b      	lsls	r3, r3, #9
 8000a82:	461a      	mov	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]

	//SPI Control Register 1 configuration
	pSPIHandle->pSPIx->SPI_CR1 = temp;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	601a      	str	r2, [r3, #0]
}
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <SPI_SendData>:
 *
 * @Note			- This is Blocking Call
 */

void SPI_SendData(SPI_TypeDef *pSPIx, uint8_t *pTXBuffer, uint32_t Length)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
	while(Length > 0)
 8000aa6:	e027      	b.n	8000af8 <SPI_SendData+0x5e>
	{
		//Wait until TXE is set (TXE will be set when TX buffer is empty)
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000aa8:	bf00      	nop
 8000aaa:	2102      	movs	r1, #2
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f000 f896 	bl	8000bde <SPI_GetFlagStatus>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d0f8      	beq.n	8000aaa <SPI_SendData+0x10>

		if(pSPIx->SPI_CR1 & (1 << SPI_CR1_DFF))
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00e      	beq.n	8000ae2 <SPI_SendData+0x48>
		{
			//16 Bit DFF
			pSPIx->SPI_DR = *((uint16_t*)pTXBuffer);
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	60da      	str	r2, [r3, #12]
			Length --;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
			Length --;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTXBuffer++;
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	3301      	adds	r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	e00a      	b.n	8000af8 <SPI_SendData+0x5e>
		}
		else
		{
			//8 Bit DFF
			pSPIx->SPI_DR = *(pTXBuffer);
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	60da      	str	r2, [r3, #12]
			Length--;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	607b      	str	r3, [r7, #4]
			pTXBuffer++;
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
	while(Length > 0)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1d4      	bne.n	8000aa8 <SPI_SendData+0xe>
		}
	}
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <SPI_ReceiveData>:
 *
 * @Note			- This is Blocking Call
 */

void SPI_ReceiveData(SPI_TypeDef *pSPIx, uint8_t *pRXBuffer, uint32_t Length)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b084      	sub	sp, #16
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
	while(Length > 0)
 8000b12:	e027      	b.n	8000b64 <SPI_ReceiveData+0x5e>
	{
		while(SPI_GetFlagStatus(pSPIx, SPI_RXE_FLAG) == FLAG_RESET);
 8000b14:	bf00      	nop
 8000b16:	2101      	movs	r1, #1
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f000 f860 	bl	8000bde <SPI_GetFlagStatus>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0f8      	beq.n	8000b16 <SPI_ReceiveData+0x10>

		if(pSPIx->SPI_CR1 & (0x1 << SPI_CR1_DFF))
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00e      	beq.n	8000b4e <SPI_ReceiveData+0x48>
		{
			*(uint16_t*)pRXBuffer = pSPIx->SPI_DR;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	801a      	strh	r2, [r3, #0]
			Length --;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	607b      	str	r3, [r7, #4]
			Length --;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRXBuffer ++;
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	e00a      	b.n	8000b64 <SPI_ReceiveData+0x5e>
		}
		else
		{
			*pRXBuffer = (uint8_t)pSPIx->SPI_DR;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	701a      	strb	r2, [r3, #0]
			Length --;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	607b      	str	r3, [r7, #4]
			pRXBuffer ++;
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	3301      	adds	r3, #1
 8000b62:	60bb      	str	r3, [r7, #8]
	while(Length > 0)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1d4      	bne.n	8000b14 <SPI_ReceiveData+0xe>
		}
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <SPI_PeripheralControl>:
 * @return			- None
 *
 * @Note			- None
 */
void SPI_PeripheralControl(SPI_TypeDef *pSPIx,uint8_t EnorDi)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000b7e:	78fb      	ldrb	r3, [r7, #3]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d106      	bne.n	8000b92 <SPI_PeripheralControl+0x20>
	{
		pSPIx->SPI_CR1 |= (0X1 << SPI_CR1_SPE);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->SPI_CR1 &= ~(0X1 << SPI_CR1_SPE);
	}
}
 8000b90:	e005      	b.n	8000b9e <SPI_PeripheralControl+0x2c>
		pSPIx->SPI_CR1 &= ~(0X1 << SPI_CR1_SPE);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	601a      	str	r2, [r3, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <SPI_SSOE_Config>:
 * @return			- None
 *
 * @Note			- None
 */
void SPI_SSOE_Config(SPI_TypeDef *pSPIx,uint8_t EnorDi)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000bb4:	78fb      	ldrb	r3, [r7, #3]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d106      	bne.n	8000bc8 <SPI_SSOE_Config+0x20>
	{
		pSPIx->SPI_CR2 |= (0X1 << SPI_CR2_SSOE);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f043 0204 	orr.w	r2, r3, #4
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->SPI_CR2 &= ~(0X1 << SPI_CR2_SSOE);
	}
}
 8000bc6:	e005      	b.n	8000bd4 <SPI_SSOE_Config+0x2c>
		pSPIx->SPI_CR2 &= ~(0X1 << SPI_CR2_SSOE);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f023 0204 	bic.w	r2, r3, #4
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	605a      	str	r2, [r3, #4]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <SPI_GetFlagStatus>:
 *
 * @Note			- None
 */

uint8_t SPI_GetFlagStatus(SPI_TypeDef *pSPIx, uint32_t FlagName)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
	if(pSPIx->SPI_SR & FlagName)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <Delay>:
#define	LED_PIN 	3

uint8_t Btn = RESET;

void Delay(uint32_t counter)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	for(uint32_t i =0 ; i<counter ; i++);
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	e002      	b.n	8000c18 <Delay+0x14>
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	3301      	adds	r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fa      	ldr	r2, [r7, #12]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d3f8      	bcc.n	8000c12 <Delay+0xe>
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
	...

08000c2c <SPI2_GPIO_Init>:

void SPI2_GPIO_Init()
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
	 * PB15 SPI2_MOSI
	 */

	GPIO_Handle_t GPIO_SPI;

	GPIO_SPI.pGPIOx = GPIOB;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <SPI2_GPIO_Init+0x58>)
 8000c34:	607b      	str	r3, [r7, #4]

	GPIO_SPI.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF;
 8000c36:	2302      	movs	r3, #2
 8000c38:	727b      	strb	r3, [r7, #9]
	GPIO_SPI.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	737b      	strb	r3, [r7, #13]
	GPIO_SPI.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	733b      	strb	r3, [r7, #12]
	GPIO_SPI.GPIO_PinConfig.GPIO_PuPdControl = GPIO_PIN_PU;
 8000c42:	2301      	movs	r3, #1
 8000c44:	72fb      	strb	r3, [r7, #11]
	GPIO_SPI.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_HIGH;
 8000c46:	2302      	movs	r3, #2
 8000c48:	72bb      	strb	r3, [r7, #10]

	//NSS
	GPIO_SPI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000c4a:	230c      	movs	r3, #12
 8000c4c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIO_SPI);
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fbb9 	bl	80003c8 <GPIO_Init>

	//SCL
	GPIO_SPI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000c56:	230d      	movs	r3, #13
 8000c58:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIO_SPI);
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fbb3 	bl	80003c8 <GPIO_Init>

	//MISO
	GPIO_SPI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000c62:	230e      	movs	r3, #14
 8000c64:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIO_SPI);
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fbad 	bl	80003c8 <GPIO_Init>

	//MOSI
	GPIO_SPI.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000c6e:	230f      	movs	r3, #15
 8000c70:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIO_SPI);
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fba7 	bl	80003c8 <GPIO_Init>
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40020400 	.word	0x40020400

08000c88 <SPI2_Init>:

void SPI2_Init()
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
	 * Serial clock phase low
	 * Hardware slave select control (Software slave select management disable)
	 */
	SPI_Handle_t SPI2Hadle;

	SPI2Hadle.pSPIx = SPI2;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <SPI2_Init+0x38>)
 8000c90:	603b      	str	r3, [r7, #0]
	SPI2Hadle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000c92:	2301      	movs	r3, #1
 8000c94:	713b      	strb	r3, [r7, #4]
	SPI2Hadle.SPI_Config.SPI_BusConfig = SPI_BUS_CNFG_FD;
 8000c96:	2301      	movs	r3, #1
 8000c98:	717b      	strb	r3, [r7, #5]
	SPI2Hadle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	71bb      	strb	r3, [r7, #6]
	SPI2Hadle.SPI_Config.SPI_DFF = SPI_DFF_8BIT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	71fb      	strb	r3, [r7, #7]
	SPI2Hadle.SPI_Config.SPI_CPOL= SPI_CPOL_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	723b      	strb	r3, [r7, #8]
	SPI2Hadle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	727b      	strb	r3, [r7, #9]
	SPI2Hadle.SPI_Config.SPI_SSM = SPI_SSM_DI;
 8000caa:	2300      	movs	r3, #0
 8000cac:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2Hadle);
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fe97 	bl	80009e4 <SPI_Init>
}
 8000cb6:	bf00      	nop
 8000cb8:	3720      	adds	r7, #32
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40003800 	.word	0x40003800

08000cc4 <GPIO_Button_Init>:

void GPIO_Button_Init()
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
	/*
	 * PA0
	 */
	GPIO_Handle_t GPIO_Btn;

	GPIO_Btn.pGPIOx = GPIOA;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <GPIO_Button_Init+0x38>)
 8000ccc:	607b      	str	r3, [r7, #4]

	GPIO_Btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	727b      	strb	r3, [r7, #9]
	GPIO_Btn.GPIO_PinConfig.GPIO_PuPdControl = GPIO_NO_PUPD;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	72fb      	strb	r3, [r7, #11]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&GPIO_Btn);
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fb73 	bl	80003c8 <GPIO_Init>

	GPIO_IRQPriorityConfig(EXTI0_IRQn, NVIC_IRQ_PRI5);
 8000ce2:	2105      	movs	r1, #5
 8000ce4:	2006      	movs	r0, #6
 8000ce6:	f7ff fde1 	bl	80008ac <GPIO_IRQPriorityConfig>
	GPIO_IRQITConfig(EXTI0_IRQn, ENABLE);
 8000cea:	2101      	movs	r1, #1
 8000cec:	2006      	movs	r0, #6
 8000cee:	f7ff fd59 	bl	80007a4 <GPIO_IRQITConfig>

}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40020000 	.word	0x40020000

08000d00 <GPIO_LED_Init>:

void GPIO_LED_Init()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0

	GPIO_Handle_t GPIO_LED;

	GPIO_LED.pGPIOx = GPIOD;
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <GPIO_LED_Init+0x3c>)
 8000d08:	607b      	str	r3, [r7, #4]

	GPIO_LED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	727b      	strb	r3, [r7, #9]
	GPIO_LED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	733b      	strb	r3, [r7, #12]
	GPIO_LED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_MEDIUM;
 8000d12:	2301      	movs	r3, #1
 8000d14:	72bb      	strb	r3, [r7, #10]
	GPIO_LED.GPIO_PinConfig.GPIO_PuPdControl = GPIO_NO_PUPD;
 8000d16:	2300      	movs	r3, #0
 8000d18:	72fb      	strb	r3, [r7, #11]
	GPIO_LED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000d1a:	230c      	movs	r3, #12
 8000d1c:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&GPIO_LED);
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fb51 	bl	80003c8 <GPIO_Init>

	GPIO_LED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000d26:	230d      	movs	r3, #13
 8000d28:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&GPIO_LED);
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fb4b 	bl	80003c8 <GPIO_Init>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40020c00 	.word	0x40020c00

08000d40 <GPIO_LED_IN_Init>:

void GPIO_LED_IN_Init()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_LED_IN;

	GPIO_LED_IN.pGPIOx = GPIOA;
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <GPIO_LED_IN_Init+0x2c>)
 8000d48:	607b      	str	r3, [r7, #4]

	GPIO_LED_IN.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	727b      	strb	r3, [r7, #9]
	GPIO_LED_IN.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_HIGH;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	72bb      	strb	r3, [r7, #10]
	GPIO_LED_IN.GPIO_PinConfig.GPIO_PuPdControl = GPIO_PIN_PU;
 8000d52:	2301      	movs	r3, #1
 8000d54:	72fb      	strb	r3, [r7, #11]
	GPIO_LED_IN.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000d56:	2303      	movs	r3, #3
 8000d58:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&GPIO_LED_IN);
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fb33 	bl	80003c8 <GPIO_Init>

}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40020000 	.word	0x40020000

08000d70 <Toggle_LED>:
void Toggle_LED()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	//Toggle LED
	GPIO_Toggle_Pin(GPIOD, GPIO_PIN_NO_12);
 8000d74:	210c      	movs	r1, #12
 8000d76:	4808      	ldr	r0, [pc, #32]	; (8000d98 <Toggle_LED+0x28>)
 8000d78:	f7ff fcff 	bl	800077a <GPIO_Toggle_Pin>
	Delay(50000);
 8000d7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d80:	f7ff ff40 	bl	8000c04 <Delay>
	GPIO_Toggle_Pin(GPIOD, GPIO_PIN_NO_12);
 8000d84:	210c      	movs	r1, #12
 8000d86:	4804      	ldr	r0, [pc, #16]	; (8000d98 <Toggle_LED+0x28>)
 8000d88:	f7ff fcf7 	bl	800077a <GPIO_Toggle_Pin>
	Btn = RESET;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <Toggle_LED+0x2c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40020c00 	.word	0x40020c00
 8000d9c:	2000001c 	.word	0x2000001c

08000da0 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
	if(ackbyte == 0xf5)
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2bf5      	cmp	r3, #245	; 0xf5
 8000dae:	d101      	bne.n	8000db4 <SPI_VerifyResponse+0x14>
		return 1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <SPI_VerifyResponse+0x16>
	return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <main>:
int main(void)
{
 8000dc0:	b5b0      	push	{r4, r5, r7, lr}
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0
	uint8_t dummy_byte = 0xFF;
 8000dc6:	23ff      	movs	r3, #255	; 0xff
 8000dc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t dummy_read;
	uint8_t ackbyte;
	uint8_t args[2];
	uint8_t anlg_value,dgtl_value,Ardunio_ID;
	char user_data[] = "SPI driver test written by Eren";
 8000dcc:	4bb9      	ldr	r3, [pc, #740]	; (80010b4 <main+0x2f4>)
 8000dce:	1d3c      	adds	r4, r7, #4
 8000dd0:	461d      	mov	r5, r3
 8000dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//SPI2 GPIO Configuration
	SPI2_GPIO_Init();
 8000dde:	f7ff ff25 	bl	8000c2c <SPI2_GPIO_Init>

	//SPI2 Configuration
	SPI2_Init();
 8000de2:	f7ff ff51 	bl	8000c88 <SPI2_Init>

	//Enable NSS output
	SPI_SSOE_Config(SPI2, ENABLE);
 8000de6:	2101      	movs	r1, #1
 8000de8:	48b3      	ldr	r0, [pc, #716]	; (80010b8 <main+0x2f8>)
 8000dea:	f7ff fedd 	bl	8000ba8 <SPI_SSOE_Config>

	//GPIO Button Configuration
	GPIO_Button_Init();
 8000dee:	f7ff ff69 	bl	8000cc4 <GPIO_Button_Init>

	//GPIO LED Configuration
	GPIO_LED_Init();
 8000df2:	f7ff ff85 	bl	8000d00 <GPIO_LED_Init>

	//GPIO Read pin
	GPIO_LED_IN_Init();
 8000df6:	f7ff ffa3 	bl	8000d40 <GPIO_LED_IN_Init>

	while(1)
	{
		//Wait until button pressed
		while(! Btn);
 8000dfa:	bf00      	nop
 8000dfc:	4baf      	ldr	r3, [pc, #700]	; (80010bc <main+0x2fc>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d0fb      	beq.n	8000dfc <main+0x3c>

		//Toggle LED and RESET Btn
		Toggle_LED();
 8000e04:	f7ff ffb4 	bl	8000d70 <Toggle_LED>

		SPI_PeripheralControl(SPI2, ENABLE);
 8000e08:	2101      	movs	r1, #1
 8000e0a:	48ab      	ldr	r0, [pc, #684]	; (80010b8 <main+0x2f8>)
 8000e0c:	f7ff feb1 	bl	8000b72 <SPI_PeripheralControl>

		//Send first Command
		uint8_t command = COMMAND_LED_CTRL;
 8000e10:	2350      	movs	r3, #80	; 0x50
 8000e12:	70fb      	strb	r3, [r7, #3]


		SPI_SendData(SPI2, &command, 1);
 8000e14:	1cfb      	adds	r3, r7, #3
 8000e16:	2201      	movs	r2, #1
 8000e18:	4619      	mov	r1, r3
 8000e1a:	48a7      	ldr	r0, [pc, #668]	; (80010b8 <main+0x2f8>)
 8000e1c:	f7ff fe3d 	bl	8000a9a <SPI_SendData>

		//RXEN flag should be cleared so to clear the RXNE after every send some data must be received
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000e20:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000e24:	2201      	movs	r2, #1
 8000e26:	4619      	mov	r1, r3
 8000e28:	48a3      	ldr	r0, [pc, #652]	; (80010b8 <main+0x2f8>)
 8000e2a:	f7ff fe6c 	bl	8000b06 <SPI_ReceiveData>

		//Send some dummy bits to fetch the response from the slaves
		SPI_SendData(SPI2, &dummy_byte, 1);
 8000e2e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000e32:	2201      	movs	r2, #1
 8000e34:	4619      	mov	r1, r3
 8000e36:	48a0      	ldr	r0, [pc, #640]	; (80010b8 <main+0x2f8>)
 8000e38:	f7ff fe2f 	bl	8000a9a <SPI_SendData>

		//Read the ack byte recieved
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000e3c:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000e40:	2201      	movs	r2, #1
 8000e42:	4619      	mov	r1, r3
 8000e44:	489c      	ldr	r0, [pc, #624]	; (80010b8 <main+0x2f8>)
 8000e46:	f7ff fe5e 	bl	8000b06 <SPI_ReceiveData>

		if(!SPI_VerifyResponse(ackbyte))
 8000e4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ffa6 	bl	8000da0 <SPI_VerifyResponse>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d11e      	bne.n	8000e98 <main+0xd8>
		{
			//send arguments
			args[0] = LED_PIN;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			args[1] = LED_ON;
 8000e60:	2301      	movs	r3, #1
 8000e62:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			SPI_SendData(SPI2, args, 2);
 8000e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4892      	ldr	r0, [pc, #584]	; (80010b8 <main+0x2f8>)
 8000e70:	f7ff fe13 	bl	8000a9a <SPI_SendData>

			if(GPIO_Read_Pin(GPIOA, GPIO_PIN_NO_3))
 8000e74:	2103      	movs	r1, #3
 8000e76:	4892      	ldr	r0, [pc, #584]	; (80010c0 <main+0x300>)
 8000e78:	f7ff fc46 	bl	8000708 <GPIO_Read_Pin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d005      	beq.n	8000e8e <main+0xce>
			{
				GPIO_Write_Pin(GPIOD, GPIO_PIN_NO_13, SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	210d      	movs	r1, #13
 8000e86:	488f      	ldr	r0, [pc, #572]	; (80010c4 <main+0x304>)
 8000e88:	f7ff fc53 	bl	8000732 <GPIO_Write_Pin>
 8000e8c:	e004      	b.n	8000e98 <main+0xd8>
			}
			else
			{
				GPIO_Write_Pin(GPIOD, GPIO_PIN_NO_13, RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	210d      	movs	r1, #13
 8000e92:	488c      	ldr	r0, [pc, #560]	; (80010c4 <main+0x304>)
 8000e94:	f7ff fc4d 	bl	8000732 <GPIO_Write_Pin>
			}

		}

		//Wait until button pressed
		while(! Btn);
 8000e98:	bf00      	nop
 8000e9a:	4b88      	ldr	r3, [pc, #544]	; (80010bc <main+0x2fc>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0fb      	beq.n	8000e9a <main+0xda>

		//Toggle LED and RESET Btn
		Toggle_LED();
 8000ea2:	f7ff ff65 	bl	8000d70 <Toggle_LED>

		//Send second Command
		command = COMMAND_SENSOR_READ;
 8000ea6:	2351      	movs	r3, #81	; 0x51
 8000ea8:	70fb      	strb	r3, [r7, #3]

		SPI_SendData(SPI2, &command, 1);
 8000eaa:	1cfb      	adds	r3, r7, #3
 8000eac:	2201      	movs	r2, #1
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4881      	ldr	r0, [pc, #516]	; (80010b8 <main+0x2f8>)
 8000eb2:	f7ff fdf2 	bl	8000a9a <SPI_SendData>

		//RXEN flag should be cleared so to clear the RXNE after every send some data must be received
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000eb6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	487e      	ldr	r0, [pc, #504]	; (80010b8 <main+0x2f8>)
 8000ec0:	f7ff fe21 	bl	8000b06 <SPI_ReceiveData>

		//Send some dummy bits to fetch the response from the slaves
		SPI_SendData(SPI2, &dummy_byte, 1);
 8000ec4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000ec8:	2201      	movs	r2, #1
 8000eca:	4619      	mov	r1, r3
 8000ecc:	487a      	ldr	r0, [pc, #488]	; (80010b8 <main+0x2f8>)
 8000ece:	f7ff fde4 	bl	8000a9a <SPI_SendData>

		//Read the ack byte recieved
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000ed2:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4877      	ldr	r0, [pc, #476]	; (80010b8 <main+0x2f8>)
 8000edc:	f7ff fe13 	bl	8000b06 <SPI_ReceiveData>

		if(!SPI_VerifyResponse(ackbyte))
 8000ee0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff5b 	bl	8000da0 <SPI_VerifyResponse>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d11a      	bne.n	8000f26 <main+0x166>
		{
			//send arguments
			args[0] = ANALOG_PIN0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			SPI_SendData(SPI2, args, 1);
 8000ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000efa:	2201      	movs	r2, #1
 8000efc:	4619      	mov	r1, r3
 8000efe:	486e      	ldr	r0, [pc, #440]	; (80010b8 <main+0x2f8>)
 8000f00:	f7ff fdcb 	bl	8000a9a <SPI_SendData>

			//Wait so slave can read analog pin
			Delay(100);
 8000f04:	2064      	movs	r0, #100	; 0x64
 8000f06:	f7ff fe7d 	bl	8000c04 <Delay>

			//Send some dummy bits to fetch the response from the slaves
			SPI_SendData(SPI2, &dummy_byte, 1);
 8000f0a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4619      	mov	r1, r3
 8000f12:	4869      	ldr	r0, [pc, #420]	; (80010b8 <main+0x2f8>)
 8000f14:	f7ff fdc1 	bl	8000a9a <SPI_SendData>

			//Read the analog pin value recieved
			SPI_ReceiveData(SPI2, &anlg_value, 1);
 8000f18:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4865      	ldr	r0, [pc, #404]	; (80010b8 <main+0x2f8>)
 8000f22:	f7ff fdf0 	bl	8000b06 <SPI_ReceiveData>
		}

		//Wait until button pressed
		while(! Btn);
 8000f26:	bf00      	nop
 8000f28:	4b64      	ldr	r3, [pc, #400]	; (80010bc <main+0x2fc>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0fb      	beq.n	8000f28 <main+0x168>

		//Toggle LED and RESET Btn
		Toggle_LED();
 8000f30:	f7ff ff1e 	bl	8000d70 <Toggle_LED>

		//Send third Command
		command = COMMAND_PIN_READ;
 8000f34:	2352      	movs	r3, #82	; 0x52
 8000f36:	70fb      	strb	r3, [r7, #3]

		SPI_SendData(SPI2, &command, 1);
 8000f38:	1cfb      	adds	r3, r7, #3
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	485e      	ldr	r0, [pc, #376]	; (80010b8 <main+0x2f8>)
 8000f40:	f7ff fdab 	bl	8000a9a <SPI_SendData>

		//RXEN flag should be cleared so to clear the RXNE after every send some data must be received
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000f44:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	485a      	ldr	r0, [pc, #360]	; (80010b8 <main+0x2f8>)
 8000f4e:	f7ff fdda 	bl	8000b06 <SPI_ReceiveData>

		//Send some dummy bits to fetch the response from the slaves
		SPI_SendData(SPI2, &dummy_byte, 1);
 8000f52:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000f56:	2201      	movs	r2, #1
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4857      	ldr	r0, [pc, #348]	; (80010b8 <main+0x2f8>)
 8000f5c:	f7ff fd9d 	bl	8000a9a <SPI_SendData>

		//Read the ack byte recieved
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000f60:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000f64:	2201      	movs	r2, #1
 8000f66:	4619      	mov	r1, r3
 8000f68:	4853      	ldr	r0, [pc, #332]	; (80010b8 <main+0x2f8>)
 8000f6a:	f7ff fdcc 	bl	8000b06 <SPI_ReceiveData>

		if(!SPI_VerifyResponse(ackbyte))
 8000f6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff14 	bl	8000da0 <SPI_VerifyResponse>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d11a      	bne.n	8000fb4 <main+0x1f4>
		{
			//send arguments
			args[0] = LED_PIN;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			SPI_SendData(SPI2, args, 1);
 8000f84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	484a      	ldr	r0, [pc, #296]	; (80010b8 <main+0x2f8>)
 8000f8e:	f7ff fd84 	bl	8000a9a <SPI_SendData>

			//Wait so slave can read digital pin
			Delay(100);
 8000f92:	2064      	movs	r0, #100	; 0x64
 8000f94:	f7ff fe36 	bl	8000c04 <Delay>

			//Send some dummy bits to fetch the response from the slaves
			SPI_SendData(SPI2, &dummy_byte, 1);
 8000f98:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4845      	ldr	r0, [pc, #276]	; (80010b8 <main+0x2f8>)
 8000fa2:	f7ff fd7a 	bl	8000a9a <SPI_SendData>

			//Read the digital pin value recieved
			SPI_ReceiveData(SPI2, &dgtl_value, 1);
 8000fa6:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000faa:	2201      	movs	r2, #1
 8000fac:	4619      	mov	r1, r3
 8000fae:	4842      	ldr	r0, [pc, #264]	; (80010b8 <main+0x2f8>)
 8000fb0:	f7ff fda9 	bl	8000b06 <SPI_ReceiveData>
		}

		//Wait until button pressed
		while(! Btn);
 8000fb4:	bf00      	nop
 8000fb6:	4b41      	ldr	r3, [pc, #260]	; (80010bc <main+0x2fc>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0fb      	beq.n	8000fb6 <main+0x1f6>

		//Toggle LED and RESET Btn
		Toggle_LED();
 8000fbe:	f7ff fed7 	bl	8000d70 <Toggle_LED>

		//Send fourth Command
		command = COMMAND_PRINT;
 8000fc2:	2353      	movs	r3, #83	; 0x53
 8000fc4:	70fb      	strb	r3, [r7, #3]

		SPI_SendData(SPI2, &command, 1);
 8000fc6:	1cfb      	adds	r3, r7, #3
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4619      	mov	r1, r3
 8000fcc:	483a      	ldr	r0, [pc, #232]	; (80010b8 <main+0x2f8>)
 8000fce:	f7ff fd64 	bl	8000a9a <SPI_SendData>

		//RXEN flag should be cleared so to clear the RXNE after every send some data must be received
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000fd2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4837      	ldr	r0, [pc, #220]	; (80010b8 <main+0x2f8>)
 8000fdc:	f7ff fd93 	bl	8000b06 <SPI_ReceiveData>

		//Send some dummy bits to fetch the response from the slaves
		SPI_SendData(SPI2, &dummy_byte, 1);
 8000fe0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4833      	ldr	r0, [pc, #204]	; (80010b8 <main+0x2f8>)
 8000fea:	f7ff fd56 	bl	8000a9a <SPI_SendData>

		//Read the ack byte recieved
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000fee:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4830      	ldr	r0, [pc, #192]	; (80010b8 <main+0x2f8>)
 8000ff8:	f7ff fd85 	bl	8000b06 <SPI_ReceiveData>

		if(!SPI_VerifyResponse(ackbyte))
 8000ffc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fecd 	bl	8000da0 <SPI_VerifyResponse>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d116      	bne.n	800103a <main+0x27a>
		{
			//send arguments
			uint8_t data_len = strlen(user_data);
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f8ea 	bl	80001e8 <strlen>
 8001014:	4603      	mov	r3, r0
 8001016:	b2db      	uxtb	r3, r3
 8001018:	70bb      	strb	r3, [r7, #2]

			SPI_SendData(SPI2, &data_len, 1);
 800101a:	1cbb      	adds	r3, r7, #2
 800101c:	2201      	movs	r2, #1
 800101e:	4619      	mov	r1, r3
 8001020:	4825      	ldr	r0, [pc, #148]	; (80010b8 <main+0x2f8>)
 8001022:	f7ff fd3a 	bl	8000a9a <SPI_SendData>

			SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff f8dd 	bl	80001e8 <strlen>
 800102e:	4602      	mov	r2, r0
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	4619      	mov	r1, r3
 8001034:	4820      	ldr	r0, [pc, #128]	; (80010b8 <main+0x2f8>)
 8001036:	f7ff fd30 	bl	8000a9a <SPI_SendData>

		}

		//Wait until button pressed
		while(! Btn);
 800103a:	bf00      	nop
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <main+0x2fc>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0fb      	beq.n	800103c <main+0x27c>

		//Toggle LED and RESET Btn
		Toggle_LED();
 8001044:	f7ff fe94 	bl	8000d70 <Toggle_LED>

		//Send third Command
		command = COMMAND_ID_READ;
 8001048:	2354      	movs	r3, #84	; 0x54
 800104a:	70fb      	strb	r3, [r7, #3]

		SPI_SendData(SPI2, &command, 1);
 800104c:	1cfb      	adds	r3, r7, #3
 800104e:	2201      	movs	r2, #1
 8001050:	4619      	mov	r1, r3
 8001052:	4819      	ldr	r0, [pc, #100]	; (80010b8 <main+0x2f8>)
 8001054:	f7ff fd21 	bl	8000a9a <SPI_SendData>

		//RXEN flag should be cleared so to clear the RXNE after every send some data must be received
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8001058:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800105c:	2201      	movs	r2, #1
 800105e:	4619      	mov	r1, r3
 8001060:	4815      	ldr	r0, [pc, #84]	; (80010b8 <main+0x2f8>)
 8001062:	f7ff fd50 	bl	8000b06 <SPI_ReceiveData>

		//Send some dummy bits to fetch the response from the slaves
		SPI_SendData(SPI2, &dummy_byte, 1);
 8001066:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800106a:	2201      	movs	r2, #1
 800106c:	4619      	mov	r1, r3
 800106e:	4812      	ldr	r0, [pc, #72]	; (80010b8 <main+0x2f8>)
 8001070:	f7ff fd13 	bl	8000a9a <SPI_SendData>

		//Read the ack byte recieved
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8001074:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8001078:	2201      	movs	r2, #1
 800107a:	4619      	mov	r1, r3
 800107c:	480e      	ldr	r0, [pc, #56]	; (80010b8 <main+0x2f8>)
 800107e:	f7ff fd42 	bl	8000b06 <SPI_ReceiveData>

		if(!SPI_VerifyResponse(ackbyte))
 8001082:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fe8a 	bl	8000da0 <SPI_VerifyResponse>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	f47f aeb3 	bne.w	8000dfa <main+0x3a>
		{
			//Send some dummy bits to fetch the response from the slaves
			SPI_SendData(SPI2, &dummy_byte, 1);
 8001094:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001098:	2201      	movs	r2, #1
 800109a:	4619      	mov	r1, r3
 800109c:	4806      	ldr	r0, [pc, #24]	; (80010b8 <main+0x2f8>)
 800109e:	f7ff fcfc 	bl	8000a9a <SPI_SendData>

			//Read the Ardunio ID recieved
			SPI_ReceiveData(SPI2, &Ardunio_ID, 1);
 80010a2:	f107 0325 	add.w	r3, r7, #37	; 0x25
 80010a6:	2201      	movs	r2, #1
 80010a8:	4619      	mov	r1, r3
 80010aa:	4803      	ldr	r0, [pc, #12]	; (80010b8 <main+0x2f8>)
 80010ac:	f7ff fd2b 	bl	8000b06 <SPI_ReceiveData>
	{
 80010b0:	e6a3      	b.n	8000dfa <main+0x3a>
 80010b2:	bf00      	nop
 80010b4:	0800119c 	.word	0x0800119c
 80010b8:	40003800 	.word	0x40003800
 80010bc:	2000001c 	.word	0x2000001c
 80010c0:	40020000 	.word	0x40020000
 80010c4:	40020c00 	.word	0x40020c00

080010c8 <EXTI0_IRQHandler>:
	}

}

void EXTI0_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	//To avoid debouncing
	Delay(50000);
 80010cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010d0:	f7ff fd98 	bl	8000c04 <Delay>

	//Clear the interrupt flag
	GPIO_IRQ_Handling(GPIO_PIN_NO_0);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff fc0d 	bl	80008f4 <GPIO_IRQ_Handling>

	//Set global variable
	Btn = SET;
 80010da:	4b02      	ldr	r3, [pc, #8]	; (80010e4 <EXTI0_IRQHandler+0x1c>)
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000001c 	.word	0x2000001c

080010e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ee:	490e      	ldr	r1, [pc, #56]	; (8001128 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <LoopForever+0xe>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001104:	4c0b      	ldr	r4, [pc, #44]	; (8001134 <LoopForever+0x16>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001112:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001116:	f000 f811 	bl	800113c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800111a:	f7ff fe51 	bl	8000dc0 <main>

0800111e <LoopForever>:

LoopForever:
    b LoopForever
 800111e:	e7fe      	b.n	800111e <LoopForever>
  ldr   r0, =_estack
 8001120:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800112c:	080011c4 	.word	0x080011c4
  ldr r2, =_sbss
 8001130:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001134:	20000020 	.word	0x20000020

08001138 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC_IRQHandler>
	...

0800113c <__libc_init_array>:
 800113c:	b570      	push	{r4, r5, r6, lr}
 800113e:	4e0d      	ldr	r6, [pc, #52]	; (8001174 <__libc_init_array+0x38>)
 8001140:	4c0d      	ldr	r4, [pc, #52]	; (8001178 <__libc_init_array+0x3c>)
 8001142:	1ba4      	subs	r4, r4, r6
 8001144:	10a4      	asrs	r4, r4, #2
 8001146:	2500      	movs	r5, #0
 8001148:	42a5      	cmp	r5, r4
 800114a:	d109      	bne.n	8001160 <__libc_init_array+0x24>
 800114c:	4e0b      	ldr	r6, [pc, #44]	; (800117c <__libc_init_array+0x40>)
 800114e:	4c0c      	ldr	r4, [pc, #48]	; (8001180 <__libc_init_array+0x44>)
 8001150:	f000 f818 	bl	8001184 <_init>
 8001154:	1ba4      	subs	r4, r4, r6
 8001156:	10a4      	asrs	r4, r4, #2
 8001158:	2500      	movs	r5, #0
 800115a:	42a5      	cmp	r5, r4
 800115c:	d105      	bne.n	800116a <__libc_init_array+0x2e>
 800115e:	bd70      	pop	{r4, r5, r6, pc}
 8001160:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001164:	4798      	blx	r3
 8001166:	3501      	adds	r5, #1
 8001168:	e7ee      	b.n	8001148 <__libc_init_array+0xc>
 800116a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800116e:	4798      	blx	r3
 8001170:	3501      	adds	r5, #1
 8001172:	e7f2      	b.n	800115a <__libc_init_array+0x1e>
 8001174:	080011bc 	.word	0x080011bc
 8001178:	080011bc 	.word	0x080011bc
 800117c:	080011bc 	.word	0x080011bc
 8001180:	080011c0 	.word	0x080011c0

08001184 <_init>:
 8001184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001186:	bf00      	nop
 8001188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800118a:	bc08      	pop	{r3}
 800118c:	469e      	mov	lr, r3
 800118e:	4770      	bx	lr

08001190 <_fini>:
 8001190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001192:	bf00      	nop
 8001194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001196:	bc08      	pop	{r3}
 8001198:	469e      	mov	lr, r3
 800119a:	4770      	bx	lr
